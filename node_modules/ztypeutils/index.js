/******************************/
//Author:   Zeeshan
//Data ---> Manupulator
//Version ---> initial
/******************************/
var example1 = '';
var example2 = [];
var example3 = {};
var example4 = null;
var example5 = undefined;

var _ = require('lodash');

var _isEmpty = (data) => { return _isString(data) ? _isStringEmpty(data) : _isArray(data) ? _isArrayEmpty(data) : _isObject(data) ? _isObjectEmpty(data) : _isUndefined(data) ? true : _isNull(data) ? true : 'INVALID_DATA'; };
var _lengthOf = (data) => { return _isString(data) ? _lenString(data) : _isArray(data) ? _lenArray(data) : _isObject(data) ? _lenObject(data) : _isUndefined(data) ? 0 : _isNull(data) ? 0 : 'INVALID_DATA';  };
var _isObject = (data) => { return _type(data) =='[object Object]';  };
var _isArray = (data) => {  return _type(data) =='[object Array]';  };
var _isString = (data) => {  return _type(data) =='[object String]';  }; 
var _isUndefined = (data) => { return _type(data) =='[object Undefined]';  }; 
var _isFunction = (data) => { return typeof data =='function';  }; 
var _isNull = (data) => { return _type(data) =='[object Null]';  };
var _compact = (data) => { return _.compact(data); }
var _uniqueList = (data) => { return _.uniq(data); };
var _merge  = (obj1, obj2) => {
  //yet to be decide array can contain multiple objects to be concatenated more then 2
  if(_validateMerge(obj1, obj2))
    console.log('valid');
  else
    console.log('invalid');
}

var _type = (data) => { return Object.prototype.toString.call(data); };
var _isArrayEmpty = (data) =>{ return _lenArray(data) < 1 ? true : false; };
var _isStringEmpty = (data) =>{ return _lenString(data) < 1 ? true : false; };
var _isObjectEmpty = (data) =>{ return _lenObject(data) < 1 ? true : false; };
var _validateMerge = (obj1, obj2) => { return _type(obj1) == _type(obj2) && _lengthOf(obj1) != 0 && _lengthOf(obj2); /*and also check length*/ };

var _findObj = function(obj, key){
  if(Object.prototype.toString.call(obj) === '[object Object]'){
   if(obj[key] != undefined) return obj[key];
   if(typeof obj == 'object') 
    for(k in obj){
      if(obj[k] == key) return {key: k,v: obj[k]};
      var v = _findObj(obj[k],key);
      if(v != undefined) return v;
    }
  } if(Object.prototype.toString.call(obj) === '[object Array]') {  return _find(obj, key); }
};

var _find = function(arr, key){
     for(i in arr){
       if(i == key){ return arr[i]; break;  }
       if(typeof arr[i] == 'string') { if(arr[i] == key) { return arr[i]; break;} }
       if(Object.prototype.toString.call(arr[i]) === '[object Object]') { 
           var v = _findObj(arr[i],key);  
           if(v != undefined) return v;
       }
       if(Object.prototype.toString.call(arr[i]) === '[object Array]') {  return _find(arr[i], key); }
     }
};

var _maxKey = (data) => {
    var max = 0;  
  for(i in data){
       max = i;
       for(j in data){
         if(parseInt(max) >= parseInt(j)) 
          max = max; 
         if(parseInt(max) < parseInt(j))
          max = j;
       }     
  }
  return max;
}; 

var _parentHistory = function(arr, splitter){
   var final='';
   for(index in arr){
      if(arr[index] != null && arr[index] != false) final += arr[index] == '' || index == arr.length -1 ? arr[index] : arr[index]+splitter;
   }
   return final;
};

var _removeElementArray = function(arr, elem){
   arr[arr.indexOf(elem)] = false;
   arr = _.compact(arr);
   return arr;
};

var _request_response_extractor = function(area, name, ancestors, splitter, current){
  var obj = area;
  if(_.lengthOf(area) == 0) return obj; 
   if(_.isArray(current)){
      console.log('Array',current);
   }
   if(_.isObject(current)){
      for(key in current){
        if(_.isArray(current)){
           console.log('Array',current);
      }
      if(_.isObject(current)){
        ancestors.push(key);  
        obj = _request_response_extractor(area, key, ancestors, splitter, current[key]);
      }
      }
   }
   if(!_.isObject(current) && !_.isArray(current)){
          area[_parentHistory(ancestors, splitter)] = current; 
          ancestors = _removeElementArray(ancestors, key); 
   }
   return obj;
};


var _lenString = (data) => { return data.length; };

var _lenArray = (data) => { return data.length; };

var _lenObject = (data) => { return Object.keys(data).length; };


module.exports = {
 isEmpty : _isEmpty,
 isArray : _isArray,
 isString : _isString,
 isObject : _isObject,
 isFunction:_isFunction,
 lengthOf : _lengthOf,
 find: _find,
 maxKey: _maxKey,
 compact: _compact,
 parentHistory:_parentHistory,
 removeElementArray: _removeElementArray,
 request_response_extractor:_request_response_extractor
};

